#!/bin/sh
# vim: set filetype=sh:

################################################################################
# Purpose:   1. Wrap the official Bitwarden CLI utility with a helper script.
#            2. Keep Bitwarden vault login persistent between user logins.
# Args/Opts: See usage (run with -h option).
# Meta:      Script installed by ansible {{ role_name | basename }}.
# Style:     ENV_VAR, Global_Var, _Global_Readonly_Var, func_local_var, MyFunc
# Refs:      https://www.drumm.sh/blog/2021/08/25/bw-cli/ (scripting)
#            https://bitwarden.com/help/cli/#core-commands (entry types)
#            https://bitwarden.com/help/condition-bitwarden-import/ (json fields)
################################################################################

# GLOBAL VARS:

# Hard-Coded Settings
readonly _Prog_Name="$(basename "${0}")"
readonly _Jq_Cmd="{{ bitwarden_cli_exec_jq_cmd }}"
readonly _Xsel_Cmd="{{ bitwarden_cli_exec_xsel_cmd }}"
readonly _Fzf_Cmd="{{ bitwarden_cli_exec_fzf_cmd }}"
readonly _Default_Login_Entry_Field_Selection='password'
readonly _Default_Card_Entry_Field_Selection='card-number'
readonly _Default_Identity_Entry_Field_Selection='ssn'
readonly _Default_Secure_Note_Entry_Field_Selection='notes'
readonly _Bitwarden_User_Name='{{ bitwarden_user_name }}'

# User Cmd Option Selections
Print_Help_Menu='false'
Print_Entry_And_Copy_Field='false'
Print_Entry='false'
Copy_Entry_Field='false'
Login_To_Vault_And_Unlock='false'
Lock_Vault_And_Logout='false'
Check_Login_And_Unlock='false'
User_Field_Selection='default'
Allow_Non_Default_User='false'

# User Cmd Option Args
Srch_Text=''
Login_Api_Key_Client_Id='{{ bitwarden_cli_api_key_client_id }}'
Login_Api_Key_Client_Secret='{{ bitwarden_cli_api_key_client_secret }}'
Session_Key_Save_File_Path='/home/{{ bitwarden_user_name }}/.local/state/bitwarden/session_key.txt'

# Bitwarden CLI Cmds
readonly _Bw_Cli_Cmd='bw'
readonly _Bw_Redir_Devnull='1> /dev/null 2>&1'
readonly _Bw_Login_Check_Cmd="${_Bw_Cli_Cmd} login --check ${_Bw_Redir_Devnull}"
readonly _Bw_Unlock_Check_Cmd_Prefix="${_Bw_Cli_Cmd} unlock --check --session"
readonly _Bw_Unlock_Check_Cmd_Suffix="${_Bw_Redir_Devnull}"
readonly _Bw_Entry_Type_Login='1'
readonly _Bw_Entry_Type_Secure_Note='2'
readonly _Bw_Entry_Type_Card='3'
readonly _Bw_Entry_Type_Identity='4'

# LOCAL FUNCTIONS:

PrintUsage() {
  prog_name_num_chars="$(printf "%s" "${_Prog_Name}" | wc -m)"
  leading_indent=''
  i=0
  while [ "${i}" -lt "${prog_name_num_chars}" ]; do
    leading_indent="${leading_indent} "
    i=$((i + 1))
  done

  default_entry_fields="${_Default_Login_Entry_Field_Selection}"
  default_entry_fields="${default_entry_fields}/${_Default_Card_Entry_Field_Selection}"
  default_entry_fields="${default_entry_fields}/${_Default_Identity_Entry_Field_Selection}"
  default_entry_fields="${default_entry_fields}/${_Default_Secure_Note_Entry_Field_Selection}"

  printf "USAGE:\n"
  printf "  %s  -h\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]     [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -s [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-U|-P|-W|-H|-B|-C|-S|-O|-L|-N]\n" "${leading_indent}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -p [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -c [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-U|-P|-W|-H|-B|-C|-S|-O|-L|-N]\n" "${leading_indent}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -l\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -x\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -k\n" "${_Prog_Name}"
  printf "ARGUMENTS:\n"
  printf "  [srch_text]\n"
  printf "      search for entry, print it, and copy field to clipboard\n"
  printf "OPTIONS:\n"
  printf "  -h, --help\n"
  printf "      print this help message\n"
  printf "  -s [srch_text], --print-entry-and-copy-field[=srch_text]\n"
  printf "      search for entry, print it, and copy field to clipboard\n"
  printf "  -p [srch_text], --print-entry[=srch_text]\n"
  printf "      search for entry, and print it\n"
  printf "  -c [srch_text], --copy-entry-field[=srch_text]\n"
  printf "      search for entry, and copy field (default: %s) to clipboard\n" "${default_entry_fields}"
  printf "  -l, --login-to-vault-and-unlock\n"
  printf "      log in to vault and unlock it (normally done automatically)\n"
  printf "  -x, --lock-vault-and-logout\n"
  printf "      lock vault and logout (Note: vault remains unlocked between user logins)\n"
  printf "  -k, --check-login-and-unlock\n"
  printf "      check if logged in to vault, and if vault is unlocked\n"
  printf "  -U, --username-field\n"
  printf "      select login-entry username field for copying\n"
  printf "  -P, --password-field\n"
  printf "      select login-entry password field for copying (default, for login entry)\n"
  printf "  -W, --web-uri-field\n"
  printf "      select login-entry web URI field for copying\n"
  printf "  -H, --cardholder-name-field\n"
  printf "      select card-entry card-holder name field for copying\n"
  printf "  -B, --card-number-field\n"
  printf "      select card-entry card number field for copying (default, for card entry)\n"
  printf "  -C, --card-code-field\n"
  printf "      select card-entry security code field for copying\n"
  printf "  -S, --ssn-field\n"
  printf "      select identity-entry social security number field for copying (default, for identity entry)\n"
  printf "  -O, --passport-number-field\n"
  printf "      select identity-entry passport number field for copying\n"
  printf "  -L, --drivers-license-field\n"
  printf "      select identity-entry driver's license number field for copying\n"
  printf "  -N, --notes-field\n"
  printf "      select notes-entry notes field for copying (default, for notes entry)\n"
  printf "  -I <id>, --login-api-key-client-id=<id>\n"
  printf "      API key client id used to log in to bitwarden (default \"%s\")\n" "${Login_Api_Key_Client_Id}"
  printf "  -T <sec>, --login-api-key-client-secret=<sec>\n"
  printf "      API key client secret used to log in to bitwarden (default \"%s\")\n" "${Login_Api_Key_Client_Secret}"
  printf "  -K <path>, --session-key-save-file-path=<path>\n"
  printf "      session key save file path, for reboot-persistence (default \"%s\")\n" "${Session_Key_Save_File_Path}"
  printf "  -Y, --allow-non-default-user\n"
  printf "      commands should be run as user '%s', but this overrides\n" "${_Bitwarden_User_Name}"
  printf "EXIT CODES:\n"
  printf "    0  ok\n"
  printf "    1  usage, arguments, or options error\n"
  printf "    5  Bitwarden CLI operation error\n"
  printf "   10  Bitwarden CLI vault login/unlock error\n"
  printf "   11  Bitwarden vault status: logged in, locked\n"
  printf "   12  Bitwarden vault status: logged out, unlocked\n"
  printf "   13  Bitwarden vault status: logged out, locked\n"
  printf "   80  jq/fzf error parsing text received from vault\n"
  printf "  120  xsel error copying text to clipboard\n"
  printf "  255  unknown error\n"
}

GetCmdOpts() {
  while getopts ':hs:p:c:lxkUPWHBCSOLNI:T:K:Y-:' option; do
    short_opt_arg="${OPTARG}"
    case "${option}" in
      h)  HandlePrintHelpMenu ;;
      s)  HandlePrintEntryAndCopyField "${short_opt_arg}" ;;
      p)  HandlePrintEntry "${short_opt_arg}" ;;
      c)  HandleCopyEntryField "${short_opt_arg}" ;;
      l)  HandleLoginToVaultAndUnlock ;;
      x)  HandleLockVaultAndLogout ;;
      k)  HandleCheckLoginAndUnlock ;;
      U)  HandleUsernameField ;;
      P)  HandlePasswordField ;;
      W)  HandleWebUriField ;;
      H)  HandleCardholderNameField ;;
      B)  HandleCardNumberField ;;
      C)  HandleCardCodeField ;;
      S)  HandleSsnField ;;
      O)  HandlePassportNumberField ;;
      L)  HandleDriversLicenseNumberField ;;
      N)  HandleNotesField ;;
      I)  HandleLoginApiKeyClientId "${short_opt_arg}" ;;
      T)  HandleLoginApiKeyClientSecret "${short_opt_arg}" ;;
      K)  HandleSessionKeySaveFilePath "${short_opt_arg}" ;;
      Y)  HandleAllowNonDefaultUser ;;
      -)  long_opt_name="${OPTARG}"
          long_opt_arg="${OPTARG#*=}"
          case ${long_opt_name} in
            help)                           HandlePrintHelpMenu ;;
            help=*)                         HandleIllegalLongOptionArg "${long_opt_name}" ;;
            print-entry-and-copy-field=?*)  HandlePrintEntryAndCopyField "${long_opt_arg}" ;;
            print-entry-and-copy-field*)    HandlePrintEntryAndCopyField ;;
            print-entry=?*)                 HandlePrintEntry "${long_opt_arg}" ;;
            print-entry*)                   HandlePrintEntry ;;
            copy-entry-field=?*)            HandleCopyEntryField "${long_opt_arg}" ;;
            copy-entry-field*)              HandleCopyEntryField ;;
            login-to-vault-and-unlock)      HandleLoginToVaultAndUnlock ;;
            login-to-vault-and-unlock=*)    HandleIllegalLongOptionArg "${long_opt_name}" ;;
            lock-vault-and-logout)          HandleLockVaultAndLogout ;;
            lock-vault-and-logout=*)        HandleIllegalLongOptionArg "${long_opt_name}" ;;
            check-login-and-unlock)         HandleCheckLoginAndUnlock ;;
            check-login-and-unlock=*)       HandleIllegalLongOptionArg "${long_opt_name}" ;;
            username-field)                 HandleUsernameField ;;
            username-field=*)               HandleIllegalLongOptionArg "${long_opt_name}" ;;
            password-field)                 HandlePasswordField ;;
            password-field=*)               HandleIllegalLongOptionArg "${long_opt_name}" ;;
            web-uri-field)                  HandleWebUriField ;;
            web-uri-field=*)                HandleIllegalLongOptionArg "${long_opt_name}" ;;
            cardholder-name-field)          HandleCardholderNameField ;;
            cardholder-name-field=*)        HandleIllegalLongOptionArg "${long_opt_name}" ;;
            card-number-field)              HandleCardNumberField ;;
            card-number-field=*)            HandleIllegalLongOptionArg "${long_opt_name}" ;;
            card-code-field)                HandleCardCodeField ;;
            card-code-field=*)              HandleIllegalLongOptionArg "${long_opt_name}" ;;
            ssn-field)                      HandleSsnField ;;
            ssn-field=*)                    HandleIllegalLongOptionArg "${long_opt_name}" ;;
            passport-number-field)          HandlePassportNumberField ;;
            passport-number-field=*)        HandleIllegalLongOptionArg "${long_opt_name}" ;;
            drivers-license-field)          HandleDriversLicenseNumberField ;;
            drivers-license-field=*)        HandleIllegalLongOptionArg "${long_opt_name}" ;;
            notes-field)                    HandleNotesField ;;
            notes-field=*)                  HandleIllegalLongOptionArg "${long_opt_name}" ;;
            login-api-key-client-id=?*)     HandleLoginApiKeyClientId "${long_opt_arg}" ;;
            login-api-key-client-id*)       HandleMissingLongOptionArg "${long_opt_name}" ;;
            login-api-key-client-secret=?*) HandleLoginApiKeyClientSecret "${long_opt_arg}" ;;
            login-api-key-client-secret*)   HandleMissingLongOptionArg "${long_opt_name}" ;;
            session-key-save-file-path=?*)  HandleSessionKeySaveFilePath "${long_opt_arg}" ;;
            session-key-save-file-path*)    HandleMissingLongOptionArg "${long_opt_name}" ;;
            allow-non-default-user)         HandleAllowNonDefaultUser ;;
            allow-non-default-user=*)       HandleIllegalLongOptionArg "${long_opt_name}" ;;
            '')                             break ;; # non-option arg starting with '-'
            *)                              HandleUnknownOption "${long_opt_name}" ;;
          esac ;;
      \?) HandleUnknownOption "${short_opt_arg}" ;;
    esac
  done
}

GetCmdArgs() {
  shift $((OPTIND - 1))
  possible_cmd_arg="${1}"

  if [ "${possible_cmd_arg}" != '' ]; then
    if [ "${Srch_Text}" = '' ]; then
      Srch_Text="${1}"
    else
      err_msg="don't specify srch_text as both option arg and cmd arg"
      QuitErrMsgWithHelp "${err_msg}" 1
    fi
  fi
}

PrintErrMsg() {
  err_msg="${1}"
  printf "ERROR:\n%s: %s\n" "${_Prog_Name}" "${err_msg}"
}

QuitErrMsg() {
  err_msg="${1}"
  err_code="${2}"
  PrintErrMsg "${err_msg}"
  exit "${err_code}"
}

QuitErrMsgWithHelp() {
  err_msg="${1}"
  err_code="${2}"
  PrintErrMsg "${err_msg}"
  printf "\n"
  PrintUsage
  exit "${err_code}"
}

HandleUnknownOption() {
  short_opt_letter_or_long_opt_name="${1}"
  err_msg="unknown option \"${short_opt_letter_or_long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandleIllegalLongOptionArg() {
  long_opt_name="${1}"
  err_msg="illegal argument in \"${long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandleMissingLongOptionArg() {
  long_opt_name="${1}"
  err_msg="missing argument for option \"${long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandlePrintHelpMenu() {
  if [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Help_Menu='true'
}

HandlePrintEntryAndCopyField() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Entry_And_Copy_Field='true'
  Srch_Text="${1}"
}

HandlePrintEntry() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Entry='true'
  Srch_Text="${1}"
}

HandleCopyEntryField() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Copy_Entry_Field='true'
  Srch_Text="${1}"
}

HandleLoginToVaultAndUnlock() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Login_To_Vault_And_Unlock='true'
}

HandleLockVaultAndLogout() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Lock_Vault_And_Logout='true'
}

HandleCheckLoginAndUnlock() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Field}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Field}" = 'true' ] || \
     [ "${Login_To_Vault_And_Unlock}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Check_Login_And_Unlock='true'
}

HandleUsernameField() {
  User_Field_Selection='username'
}

HandlePasswordField() {
  User_Field_Selection='password'
}

HandleWebUriField() {
  User_Field_Selection='web-uri'
}

HandleCardholderNameField() {
  User_Field_Selection='cardholder-name'
}

HandleCardNumberField() {
  User_Field_Selection='card-number'
}

HandleCardCodeField() {
  User_Field_Selection='card-security-code'
}

HandleSsnField() {
  User_Field_Selection='ssn'
}

HandlePassportNumberField() {
  User_Field_Selection='passport-number'
}

HandleDriversLicenseNumberField() {
  User_Field_Selection='drivers-license-number'
}

HandleNotesField() {
  User_Field_Selection='notes'
}

HandleLoginApiKeyClientId() {
  Login_Api_Key_Client_Id="${1}"
}

HandleLoginApiKeyClientSecret() {
  Login_Api_Key_Client_Secret="${1}"
}

HandleSessionKeySaveFilePath() {
  Session_Key_Save_File_Path="${1}"
}

HandleAllowNonDefaultUser() {
  Allow_Non_Default_User='true'
}

QuitIfRcNot0() {
  cmd_exit_code="${1}"
  err_msg="${2}"
  script_exit_code="${3}"
  if [ "${cmd_exit_code}" != 0 ]; then
    QuitErrMsg "${err_msg}" "${script_exit_code}"
  fi
}

TryWithFallback() {
  try_cmd="${1}"
  fallback_cmd="${2}"
  err_msg="${3}"
  err_code="${4}"
  eval "${try_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    eval "${fallback_cmd}"
    exit_code="${?}"
    if [ "${exit_code}" != 0 ]; then
      QuitErrMsg "${err_msg}" "${err_code}"
    fi
  fi
}

CreateSessionKeySaveFileAsReq() {
  if [ ! -f "${Session_Key_Save_File_Path}" ]; then
    session_key_save_file_dir=$(dirname "${Session_Key_Save_File_Path}")
    mkdir -p "${session_key_save_file_dir}"
    printf "%s" 'NoSessionKeyYet' > "${Session_Key_Save_File_Path}"
  fi
}

LoginToBitwardenAsReq() {
  show_prep_msg='printf "Logging in to Bitwarden vault...\n"'
  set_api_key="BW_CLIENTID='${Login_Api_Key_Client_Id}' BW_CLIENTSECRET='${Login_Api_Key_Client_Secret}'"
  login_to_bw="${_Bw_Cli_Cmd} login --raw --apikey"
  show_stat_msg='printf "Successfully logged in.\n"'
  run_login_cmd="${show_prep_msg} && ${set_api_key} ${login_to_bw} && ${show_stat_msg}"

  TryWithFallback \
    "${_Bw_Login_Check_Cmd}" \
    "${run_login_cmd}" \
    "Bitwarden CLI error attempting to login" 10
}

UnlockBitwardenVaultAsReq() {
  Session_Key="$(cat "${Session_Key_Save_File_Path}")"
  run_unlock_check_cmd="${_Bw_Unlock_Check_Cmd_Prefix} \"${Session_Key}\" ${_Bw_Unlock_Check_Cmd_Suffix}"

  show_prep_msg='printf "Unlocking Bitwarden vault...\n"'
  unlock_bw_vault="${_Bw_Cli_Cmd} unlock --raw > \"${Session_Key_Save_File_Path}\""
  show_stat_msg='printf "Successfully unlocked vault.\n"'
  run_unlock_cmd="${show_prep_msg} && ${unlock_bw_vault} && ${show_stat_msg}"

  TryWithFallback \
    "${run_unlock_check_cmd}" \
    "${run_unlock_cmd}" \
    "Bitwarden CLI error attempting to unlock vault" 10
}

LoginToBitwardenAndUnlockVaultAsReq() {
  CreateSessionKeySaveFileAsReq "$@"
  LoginToBitwardenAsReq "$@"
  UnlockBitwardenVaultAsReq "$@"
}

SyncLocalVaultFromServerVault() {
  ${_Bw_Cli_Cmd} sync --session "${Session_Key}" 1> /dev/null 2>&1
  QuitIfRcNot0 "${?}" "Bitwarden CLI error syncing local vault from BW server vault" 5
}

GetEntryFromLocalVault() {
  entries_from_server="$("${_Bw_Cli_Cmd}" list items --session "${Session_Key}")"
  QuitIfRcNot0 "${?}" "Bitwarden CLI error getting entries from BW server" 5

  user_selected_entry_name="$(
    printf "%s" "${entries_from_server}" | \
      "${_Jq_Cmd}" --raw-output ".[].name" | \
      "${_Fzf_Cmd}" --query="${Srch_Text}" --select-1 --reverse)"
  exit_code="${?}"

  if [ "${user_selected_entry_name}" = '' ]; then
    exit 0
  else
    QuitIfRcNot0 "${exit_code}" "jq/fzf error selecting entry-name from received vault entries" 80
  fi

  User_Selected_Entry="$(
    printf "%s" "${entries_from_server}" | \
      "${_Jq_Cmd}" ".[] | select(.name == \"${user_selected_entry_name}\")")"
  QuitIfRcNot0 "${?}" "jq error extracting entry from user-selected entry-name " 80
}

GetReceivedEntryTypeFromUserSelectedEntry() {
  Received_Entry_Type="$(
    printf "%s" "${User_Selected_Entry}" | \
      "${_Jq_Cmd}" --raw-output ".type")"
  QuitIfRcNot0 "${?}" "jq error extracting Received_Entry_Type" 80
}

GetReceivedEntryFieldFromUserSelectedEntry() {
  entry_json="${1}"

  Received_Entry_Field="$(
    printf "%s" "${User_Selected_Entry}" | \
      "${_Jq_Cmd}" --raw-output "${entry_json}")"
  QuitIfRcNot0 "${?}" "jq error extracting Received_Entry_Field" 80
}

PrintReceivedEntryFieldLines() {
  entry_label="${1}"
  num_chars_to_indent="${2}"

  if [ "${Received_Entry_Field}" != 'null' ]; then
    first_line='true'
    printf "%s\n" "${Received_Entry_Field}" | while IFS= read -r entry_text_line; do
      if [ "${first_line}" = 'true' ]; then
        printf "%s %s\n" "${entry_label}" "${entry_text_line}"
        first_line='false'
      else
        i=0
        while [ "${i}" -lt "${num_chars_to_indent}" ]; do
          printf " "
          i=$((i + 1))
        done
        printf " %s\n" "${entry_text_line}"
      fi
    done
  fi
}

PrintEntryFieldIfNotNull() {
  entry_label="${1}"
  entry_json="${2}"
  num_chars_to_indent="${3}"

  GetReceivedEntryFieldFromUserSelectedEntry "${entry_json}"
  PrintReceivedEntryFieldLines "${entry_label}" "${num_chars_to_indent}"
}

PrintAllCustomFields() {
  num_chars_to_indent="${1}"

  GetReceivedEntryFieldFromUserSelectedEntry ".fields"

  if [ "${Received_Entry_Field}" != 'null' ]; then
    all_custom_fields="$(printf "%s" "${Received_Entry_Field}" | "${_Jq_Cmd}" --raw-output ".[]")"
    QuitIfRcNot0 "${?}" "jq error extracting all_custom_fields 'fields'" 80
    printf "%s" "${all_custom_fields}" | "${_Jq_Cmd}" --raw-output "[.name, .value] | @tsv" | while IFS="$(printf '\t.')" read -r field_name field_value; do
      entry_label="${field_name}:"
      Received_Entry_Field="${field_value}"
      PrintReceivedEntryFieldLines "${entry_label}" "${num_chars_to_indent}"
    done
  fi
}

PrintEntryReceivedFromLocalVault() {
  num_chars_to_indent=5

  PrintEntryFieldIfNotNull "NAME:" ".name" "${num_chars_to_indent}"

  if [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Login}" ]; then
    PrintEntryFieldIfNotNull "USER:" ".login.username"   "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "PSWD:" ".login.password"   "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "URLS:" ".login.uris[].uri" "${num_chars_to_indent}"
  fi

  if [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Card}" ]; then
    PrintEntryFieldIfNotNull "HLDR:" ".card.cardholderName" "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "BRND:" ".card.brand"          "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "NUM: " ".card.number"         "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "CODE:" ".card.code"           "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "EXPM:" ".card.expMonth"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "EXPY:" ".card.expYear"        "${num_chars_to_indent}"
  fi

  if [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Identity}" ]; then
    PrintEntryFieldIfNotNull "TTL: " ".identity.title"          "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "FNM: " ".identity.firstName"      "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "MNM: " ".identity.middleName"     "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "LNM: " ".identity.lastName"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "ADR1:" ".identity.address1"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "ADR2:" ".identity.address2"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "ADR3:" ".identity.address3"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "CITY:" ".identity.city"           "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "STAT:" ".identity.state"          "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "ZIP: " ".identity.postalCode"     "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "CTRY:" ".identity.country"        "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "COMP:" ".identity.company"        "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "EML: " ".identity.email"          "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "PHN: " ".identity.phone"          "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "SSN: " ".identity.ssn"            "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "UNM: " ".identity.username"       "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "PPT: " ".identity.passportNumber" "${num_chars_to_indent}"
    PrintEntryFieldIfNotNull "LIC: " ".identity.licenseNumber"  "${num_chars_to_indent}"
  fi

  PrintAllCustomFields "${num_chars_to_indent}"
  PrintEntryFieldIfNotNull "NOTE:" ".notes" "${num_chars_to_indent}"
}

CheckSelectedEntryFieldIsValidForEntryType() {
  if [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Login}" ]; then
    if [ "${User_Field_Selection}" = 'default' ]; then
      User_Field_Selection="${_Default_Login_Entry_Field_Selection}"
    elif [ "${User_Field_Selection}" != 'username' ] && \
         [ "${User_Field_Selection}" != 'password' ] && \
         [ "${User_Field_Selection}" != 'web-uri' ]  && \
         [ "${User_Field_Selection}" != 'notes' ]; then
      QuitErrMsg "Invalid field selected for entry of type \"Login\"" 1
    fi
  elif [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Card}" ]; then
    if [ "${User_Field_Selection}" = 'default' ]; then
      User_Field_Selection="${_Default_Card_Entry_Field_Selection}"
    elif [ "${User_Field_Selection}" != 'cardholder-name' ] && \
         [ "${User_Field_Selection}" != 'card-number' ] && \
         [ "${User_Field_Selection}" != 'card-security-code' ] && \
         [ "${User_Field_Selection}" != 'notes' ]; then
      QuitErrMsg "Invalid field selected for entry of type \"Card\"" 1
    fi
  elif [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Identity}" ]; then
    if [ "${User_Field_Selection}" = 'default' ]; then
      User_Field_Selection="${_Default_Identity_Entry_Field_Selection}"
    elif [ "${User_Field_Selection}" != 'ssn' ] && \
         [ "${User_Field_Selection}" != 'passport-number' ] && \
         [ "${User_Field_Selection}" != 'drivers-license-number' ] && \
         [ "${User_Field_Selection}" != 'notes' ]; then
      QuitErrMsg "Invalid field selected for entry of type \"Identity\"" 1
    fi
  elif [ "${Received_Entry_Type}" = "${_Bw_Entry_Type_Secure_Note}" ]; then
    if [ "${User_Field_Selection}" = 'default' ]; then
      User_Field_Selection="${_Default_Secure_Note_Entry_Field_Selection}"
    elif [ "${User_Field_Selection}" != 'notes' ]; then
      QuitErrMsg "Invalid field selected for entry of type \"Notes\"" 1
    fi
  else
    QuitErrMsg "Unknown entry type received from Bitwarden server" 255
  fi
}

GetSelectedEntryFieldFromReceivedEntry() {
  if [ "${User_Field_Selection}" = 'username' ]; then
    entry_field_json='.login.username'
  elif [ "${User_Field_Selection}" = 'password' ]; then
    entry_field_json='.login.password'
  elif [ "${User_Field_Selection}" = 'web-uri' ]; then
    entry_field_json='.login.uris[0].uri'
  elif [ "${User_Field_Selection}" = 'cardholder-name' ]; then
    entry_field_json='.card.cardholderName'
  elif [ "${User_Field_Selection}" = 'card-number' ]; then
    entry_field_json='.card.number'
  elif [ "${User_Field_Selection}" = 'card-security-code' ]; then
    entry_field_json='.card.code'
  elif [ "${User_Field_Selection}" = 'ssn' ]; then
    entry_field_json='.identity.ssn'
  elif [ "${User_Field_Selection}" = 'passport-number' ]; then
    entry_field_json='.identity.passportNumber'
  elif [ "${User_Field_Selection}" = 'drivers-license-number' ]; then
    entry_field_json='.identity.licenseNumber'
  elif [ "${User_Field_Selection}" = 'notes' ]; then
    entry_field_json='.notes'
  else
    QuitErrMsg "uknown mapping of user-selected field to field json" 255
  fi

  Received_Entry_Field="$(
    printf "%s" "${User_Selected_Entry}" | \
      "${_Jq_Cmd}" --raw-output "${entry_field_json}")"
  QuitIfRcNot0 "${?}" "jq error extracting selected field from received entry" 80
}

CopySelectedFieldToClipboard() {
  printf "Copying entry \"%s\" field to clipboard..." "${User_Field_Selection}"
  printf "%s" "${Received_Entry_Field}" | "${_Xsel_Cmd}" --input --clipboard
  QuitIfRcNot0 "${?}" "xsel error copying text to clipboard " 120
}

CheckRunningAsDefaultUser() {
  if [ "$(id -un)" != "${_Bitwarden_User_Name}" ] && [ "${Allow_Non_Default_User}" = 'false' ]; then
    err_msg="run this script as user '${_Bitwarden_User_Name}', or use -U to override"
    QuitErrMsg "${err_msg}" 1
  fi
}

DoPrintHelpMenu() {
  PrintUsage
}

DoPrintEntryAndCopyField() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
  SyncLocalVaultFromServerVault "$@"
  GetEntryFromLocalVault "$@"
  GetReceivedEntryTypeFromUserSelectedEntry "$@"
  PrintEntryReceivedFromLocalVault "$@"
  CheckSelectedEntryFieldIsValidForEntryType "$@"
  GetSelectedEntryFieldFromReceivedEntry "$@"
  CopySelectedFieldToClipboard "$@"
}

DoPrintEntry() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
  SyncLocalVaultFromServerVault "$@"
  GetEntryFromLocalVault "$@"
  GetReceivedEntryTypeFromUserSelectedEntry "$@"
  PrintEntryReceivedFromLocalVault "$@"
}

DoCopyEntryField() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
  SyncLocalVaultFromServerVault "$@"
  GetEntryFromLocalVault "$@"
  GetReceivedEntryTypeFromUserSelectedEntry "$@"
  CheckSelectedEntryFieldIsValidForEntryType  "$@"
  GetSelectedEntryFieldFromReceivedEntry "$@"
  CopySelectedFieldToClipboard "$@"
}

DoLoginToVaultAndUnlock() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
}

DoLockVaultAndLogout() {
  # Note: logging out automatically locks the vault and invalidates session key
  printf "Locking Bitwarden vault and logging out...\n"
  ${_Bw_Cli_Cmd} logout 1> /dev/null 2>&1

  exit_code="${?}"
  if [ "${exit_code}" = 1 ]; then
    printf "Vault already locked, and already logged out.\n"
  elif [ "${exit_code}" != 0 ]; then
    QuitErrMsg "Bitwarden CLI error attempting to logout" 5
  else
    printf "Successfully locked vault and logged out.\n"
  fi
}

DoCheckLoginAndUnlock() {
  CreateSessionKeySaveFileAsReq "$@"

  eval "${_Bw_Login_Check_Cmd}"
  exit_code="${?}"
  if [ "${exit_code}" = 0 ]; then
    login_status="logged in"
  elif [ "${exit_code}" = 1 ]; then
    login_status="logged out"
  else
    QuitErrMsg "Bitwarden CLI error attempting to check vault login" 5
  fi

  session_key="$(cat "${Session_Key_Save_File_Path}")"
  run_unlock_check_cmd="${_Bw_Unlock_Check_Cmd_Prefix} \"${session_key}\" ${_Bw_Unlock_Check_Cmd_Suffix}"
  eval "${run_unlock_check_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" = 0 ]; then
    vault_status="unlocked"
  elif [ "${exit_code}" = 1 ]; then
    vault_status="locked"
  else
    QuitErrMsg "Bitwarden CLI error attempting to check vault unlock" 5
  fi

  printf "Vault status: %s, %s.\n" "${login_status}" "${vault_status}"

  if [ "${login_status}" = 'logged in' ] && [ "${vault_status}" = 'locked' ]; then
    exit 11
  elif [ "${login_status}" = 'logged out' ] && [ "${vault_status}" = 'unlocked' ]; then
    exit 12
  elif [ "${login_status}" = 'logged out' ] && [ "${vault_status}" = 'locked' ]; then
    exit 13
  fi
}

# MAIN SCRIPT:

Main() {
  GetCmdOpts "$@"
  GetCmdArgs "$@"
  CheckRunningAsDefaultUser "$@"
  if [ "${Print_Help_Menu}" = 'true' ]; then
    DoPrintHelpMenu "$@"
  elif [ "${Print_Entry_And_Copy_Field}" = 'true' ]; then
    DoPrintEntryAndCopyField "$@"
  elif [ "${Print_Entry}" = 'true' ]; then
    DoPrintEntry "$@"
  elif [ "${Copy_Entry_Field}" = 'true' ]; then
    DoCopyEntryField "$@"
  elif [ "${Login_To_Vault_And_Unlock}" = 'true' ]; then
    DoLoginToVaultAndUnlock "$@"
  elif [ "${Lock_Vault_And_Logout}" = 'true' ]; then
    DoLockVaultAndLogout "$@"
  elif [ "${Check_Login_And_Unlock}" = 'true' ]; then
    DoCheckLoginAndUnlock "$@"
  else
    DoPrintEntryAndCopyField "$@"
  fi
  exit 0
}

Main "$@"

