#!/bin/sh
# vim: set filetype=sh:

################################################################################
# Purpose:   1. Wrap the official Bitwarden CLI utility with a helper script.
#            2. Keep Bitwarden vault login persistent between user logins.
# Args/Opts: See usage (run with -h option).
# Meta:      Script installed by ansible {{ role_name | basename }}.
# Style:     ENV_VAR, Global_Var, _Global_Readonly_Var, func_local_var, MyFunc
################################################################################

# GLOBAL VARS:

# Hard-Coded Settings
readonly _Prog_Name="$(basename "${0}")"
readonly _Jq_Cmd="{{ bitwarden_cli_exec_jq_cmd }}"
readonly _Xsel_Cmd="{{ bitwarden_cli_exec_xsel_cmd }}"
readonly _Fzf_Cmd="{{ bitwarden_cli_exec_fzf_cmd }}"

# User Cmd Option Selections
Print_Help_Menu='false'
Print_Entry_And_Copy_Pswd='false'
Print_Entry='false'
Copy_Entry_Pswd='false'
Lock_Vault_And_Logout='false'
Check_Login_And_Unlock='false'

# User Cmd Option Args
Srch_Text=''
Login_Api_Key_Client_Id='{{ bitwarden_cli_api_key_client_id }}'
Login_Api_Key_Client_Secret='{{ bitwarden_cli_api_key_client_secret }}'
Session_Key_Save_File_Path='/home/{{ bitwarden_user_name }}/.local/state/bitwarden/session_key.txt'

# Bitwarden CLI Cmds
# Ref for "Item Types": https://bitwarden.com/help/cli/#core-commands
# Ref for json fields:  https://bitwarden.com/help/condition-bitwarden-import/
readonly _Bw_Cli_Cmd='bw'
readonly _Bw_Redir_Devnull='1> /dev/null 2>&1'
readonly _Bw_Login_Check_Cmd="${_Bw_Cli_Cmd} login --check ${_Bw_Redir_Devnull}"
readonly _Bw_Unlock_Check_Cmd_Prefix="${_Bw_Cli_Cmd} unlock --check --session"
readonly _Bw_Unlock_Check_Cmd_Suffix="${_Bw_Redir_Devnull}"
readonly _Bw_Entry_Type_Login='1'
# readonly _Bw_Entry_Type_Secure_Note='2'
readonly _Bw_Entry_Type_Card='3'
readonly _Bw_Entry_Type_Identity='4'
readonly _Bw_Entry_Type_All='all'

# LOCAL FUNCTIONS:

PrintUsage() {
  printf "USAGE:\n"
  printf "  %s  -h\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]     [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -s [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -p [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -c [srch_text]\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -x\n" "${_Prog_Name}"
  printf "  %s  [-I <id>]  [-T <sec>]  [-K <path>]  -k\n" "${_Prog_Name}"
  printf "ARGUMENTS:\n"
  printf "  [srch_text]\n"
  printf "      search for entry, print it, and copy password to clipboard\n"
  printf "OPTIONS:\n"
  printf "  -h, --help\n"
  printf "      print this help message\n"
  printf "  -s [srch_text], --print-entry-and-copy-pswd[=srch_text]\n"
  printf "      search for entry, print it, and copy password to clipboard\n"
  printf "  -p [srch_text], --print-entry[=srch_text]\n"
  printf "      search for entry, and print it\n"
  printf "  -c [srch_text], --copy-entry-pswd[=srch_text]\n"
  printf "      search for entry, and copy password to clipboard\n"
  printf "  -x, --lock-vault-and-logout\n"
  printf "      lock vault and logout (Note: vault remains unlocked between user logins)\n"
  printf "  -k, --check-login-and-unlock\n"
  printf "      check if logged in to vault, and if vault is unlocked\n"
  printf "  -I <id>, --login-api-key-client-id=<id>\n"
  printf "      API key client id used to log in to bitwarden (default \"%s\")\n" "${Login_Api_Key_Client_Id}"
  printf "  -T <sec>, --login-api-key-client-secret=<sec>\n"
  printf "      API key client secret used to log in to bitwarden (default \"%s\")\n" "${Login_Api_Key_Client_Secret}"
  printf "  -K <path>, --session-key-save-file-path=<path>\n"
  printf "      session key save file path, for reboot-persistence (default \"%s\")\n" "${Session_Key_Save_File_Path}"
  printf "EXIT CODES:\n"
  printf "    0  ok\n"
  printf "    1  usage, arguments, or options error\n"
  printf "    5  Bitwarden CLI operation error\n"
  printf "   10  Bitwarden CLI vault login/unlock error\n"
  printf "  255  unknown error\n"
}

GetCmdOpts() {
  while getopts ':hs:p:c:xkI:T:K:-:' option; do
    short_opt_arg="${OPTARG}"
    case "${option}" in
      h)  HandlePrintHelpMenu ;;
      s)  HandlePrintEntryAndCopyPswd "${short_opt_arg}" ;;
      p)  HandlePrintEntry "${short_opt_arg}" ;;
      c)  HandleCopyEntryPswd "${short_opt_arg}" ;;
      x)  HandleLockVaultAndLogout ;;
      k)  HandleCheckLoginAndUnlock ;;
      I)  HandleLoginApiKeyClientId "${short_opt_arg}" ;;
      T)  HandleLoginApiKeyClientSecret "${short_opt_arg}" ;;
      K)  HandleSessionKeySaveFilePath "${short_opt_arg}" ;;
      -)  long_opt_name="${OPTARG}"
          long_opt_arg="${OPTARG#*=}"
          case ${long_opt_name} in
            help)                           HandlePrintHelpMenu ;;
            help=*)                         HandleIllegalLongOptionArg "${long_opt_name}" ;;
            print-entry-and-copy-pswd=?*)   HandlePrintEntryAndCopyPswd "${long_opt_arg}" ;;
            print-entry-and-copy-pswd*)     HandlePrintEntryAndCopyPswd ;;
            print-entry=?*)                 HandlePrintEntry "${long_opt_arg}" ;;
            print-entry*)                   HandlePrintEntry ;;
            copy-entry-pswd=?*)             HandleCopyEntryPswd "${long_opt_arg}" ;;
            copy-entry-pswd*)               HandleCopyEntryPswd ;;
            lock-vault-and-logout=?*)       HandleLockVaultAndLogout ;;
            lock-vault-and-logout*)         HandleIllegalLongOptionArg "${long_opt_name}" ;;
            check-login-and-unlock=?*)      HandleCheckLoginAndUnlock ;;
            check-login-and-unlock*)        HandleIllegalLongOptionArg "${long_opt_name}" ;;
            login-api-key-client-id=?*)     HandleLoginApiKeyClientId "${long_opt_arg}" ;;
            login-api-key-client-id*)       HandleMissingLongOptionArg "${long_opt_name}" ;;
            login-api-key-client-secret=?*) HandleLoginApiKeyClientSecret "${long_opt_arg}" ;;
            login-api-key-client-secret*)   HandleMissingLongOptionArg "${long_opt_name}" ;;
            session-key-save-file-path=?*)  HandleSessionKeySaveFilePath "${long_opt_arg}" ;;
            session-key-save-file-path*)    HandleMissingLongOptionArg "${long_opt_name}" ;;
            '')                             break ;; # non-option arg starting with '-'
            *)                              HandleUnknownOption "${long_opt_name}" ;;
          esac ;;
      \?) HandleUnknownOption "${short_opt_arg}" ;;
    esac
  done
}

GetCmdArgs() {
  shift $((OPTIND - 1))
  possible_cmd_arg="${1}"

  if [ "${possible_cmd_arg}" != '' ]; then
    if [ "${Srch_Text}" = '' ]; then
      Srch_Text="${1}"
    else
      err_msg="don't specify srch_text as both option arg and cmd arg"
      QuitErrMsgWithHelp "${err_msg}" 1
    fi
  fi
}

PrintErrMsg() {
  err_msg="${1}"
  printf "ERROR:\n%s: %s\n" "${_Prog_Name}" "${err_msg}"
}

QuitErrMsg() {
  err_msg="${1}"
  err_code="${2}"
  PrintErrMsg "${err_msg}"
  exit "${err_code}"
}

QuitErrMsgWithHelp() {
  err_msg="${1}"
  err_code="${2}"
  PrintErrMsg "${err_msg}"
  printf "\n"
  PrintUsage
  exit "${err_code}"
}

HandleUnknownOption() {
  short_opt_letter_or_long_opt_name="${1}"
  err_msg="unknown option \"${short_opt_letter_or_long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandleIllegalLongOptionArg() {
  long_opt_name="${1}"
  err_msg="illegal argument in \"${long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandleMissingLongOptionArg() {
  long_opt_name="${1}"
  err_msg="missing argument for option \"${long_opt_name}\""
  QuitErrMsgWithHelp "${err_msg}" 1
}

HandlePrintHelpMenu() {
  if [ "${Print_Entry_And_Copy_Pswd}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Pswd}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Help_Menu='true'
}

HandlePrintEntryAndCopyPswd() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Pswd}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Entry_And_Copy_Pswd='true'
  Srch_Text="${1}"
}

HandlePrintEntry() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Pswd}" = 'true' ] || \
     [ "${Copy_Entry_Pswd}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Print_Entry='true'
  Srch_Text="${1}"
}

HandleCopyEntryPswd() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Pswd}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Copy_Entry_Pswd='true'
  Srch_Text="${1}"
}

HandleLockVaultAndLogout() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Pswd}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Pswd}" = 'true' ] || \
     [ "${Check_Login_And_Unlock}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Lock_Vault_And_Logout='true'
}

HandleCheckLoginAndUnlock() {
  if [ "${Print_Help_Menu}" = 'true' ] || \
     [ "${Print_Entry_And_Copy_Pswd}" = 'true' ] || \
     [ "${Print_Entry}" = 'true' ] || \
     [ "${Copy_Entry_Pswd}" = 'true' ] || \
     [ "${Lock_Vault_And_Logout}" = 'true' ]; then
    QuitErrMsgWithHelp "mutually exclusive options selected" 1
  fi
  Check_Login_And_Unlock='true'
}

HandleLoginApiKeyClientId() {
  Login_Api_Key_Client_Id="${1}"
}

HandleLoginApiKeyClientSecret() {
  Login_Api_Key_Client_Secret="${1}"
}

HandleSessionKeySaveFilePath() {
  Session_Key_Save_File_Path="${1}"
}

QuitIfRcNot0() {
  cmd_exit_code="${1}"
  err_msg="${2}"
  script_exit_code="${3}"
  if [ "${cmd_exit_code}" != 0 ]; then
    QuitErrMsg "${err_msg}" "${script_exit_code}"
  fi
}

TryWithFallback() {
  try_cmd="${1}"
  fallback_cmd="${2}"
  err_msg="${3}"
  err_code="${4}"
  eval "${try_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    eval "${fallback_cmd}"
    exit_code="${?}"
    if [ "${exit_code}" != 0 ]; then
      QuitErrMsg "${err_msg}" "${err_code}"
    fi
  fi
}

CreateSessionKeySaveFileAsReq() {
  if [ ! -f "${Session_Key_Save_File_Path}" ]; then
    session_key_save_file_dir=$(dirname "${Session_Key_Save_File_Path}")
    mkdir -p "${session_key_save_file_dir}"
    printf "%s" 'NoSessionKeyYet' > "${Session_Key_Save_File_Path}"
  fi
}

LoginToBitwardenAsReq() {
  show_prep_msg='printf "Logging in to Bitwarden vault...\n"'
  set_api_key="BW_CLIENTID='${Login_Api_Key_Client_Id}' BW_CLIENTSECRET='${Login_Api_Key_Client_Secret}'"
  login_to_bw="${_Bw_Cli_Cmd} login --raw --apikey"
  show_stat_msg='printf "Successfully logged in.\n"'
  run_login_cmd="${show_prep_msg} && ${set_api_key} ${login_to_bw} && ${show_stat_msg}"

  TryWithFallback \
    "${_Bw_Login_Check_Cmd}" \
    "${run_login_cmd}" \
    "Bitwarden CLI error attempting to login" 10
}

UnlockBitwardenVaultAsReq() {
  Session_Key="$(cat "${Session_Key_Save_File_Path}")"
  run_unlock_check_cmd="${_Bw_Unlock_Check_Cmd_Prefix} \"${Session_Key}\" ${_Bw_Unlock_Check_Cmd_Suffix}"

  show_prep_msg='printf "Unlocking Bitwarden vault...\n"'
  unlock_bw_vault="${_Bw_Cli_Cmd} unlock --raw > \"${Session_Key_Save_File_Path}\""
  show_stat_msg='printf "Successfully unlocked vault.\n"'
  run_unlock_cmd="${show_prep_msg} && ${unlock_bw_vault} && ${show_stat_msg}"

  TryWithFallback \
    "${run_unlock_check_cmd}" \
    "${run_unlock_cmd}" \
    "Bitwarden CLI error attempting to unlock vault" 10
}

LoginToBitwardenAndUnlockVaultAsReq() {
  CreateSessionKeySaveFileAsReq "$@"
  LoginToBitwardenAsReq "$@"
  UnlockBitwardenVaultAsReq "$@"
}

GetEntryFromBitwardenVaultServer() {
  entries_from_server="$("${_Bw_Cli_Cmd}" list items --session "${Session_Key}")"
  QuitIfRcNot0 "${?}" "Bitwarden CLI error getting entries from BW server" 5

  user_selected_entry_name="$(
    printf "%s" "${entries_from_server}" | \
      "${_Jq_Cmd}" --raw-output ".[].name" | \
      "${_Fzf_Cmd}" --query="${Srch_Text}" --select-1 --reverse)"
  User_Selected_Entry="$(
    printf "%s" "${entries_from_server}" | \
      "${_Jq_Cmd}" ".[] | select(.name == \"${user_selected_entry_name}\")")"

  if [ "${User_Selected_Entry}" = '' ]; then
    exit 0
  fi
}

PrintEntryFieldIfNotNull() {
  entry_label="${1}"
  entry_json="${2}"
  entry_type="${3}"
  entry_array_json="${4}"

  received_entry_type="$(
    printf "%s" "${User_Selected_Entry}" | \
      "${_Jq_Cmd}" --raw-output ".type")"

  if [ "${entry_type}" = "${_Bw_Entry_Type_All}" ] || \
     [ "${entry_type}" = "${received_entry_type}" ]; then
    # entry field is a simple field
    if [ "${entry_array_json}" = '' ]; then
      received_entry_text="$(
        printf "%s" "${User_Selected_Entry}" | \
          "${_Jq_Cmd}" --raw-output "${entry_json}")"
      if [ "${received_entry_text}" != 'null' ]; then
        printf "%s %s\n" "${entry_label}" "${received_entry_text}"
      fi
    # entry field is an array field
    else
      received_entry_array_text="$(
        printf "%s" "${User_Selected_Entry}" | \
          "${_Jq_Cmd}" --raw-output "${entry_json}[]${entry_array_json}")"
      # testing the print here..............................
      printf "%s %s\n" "${entry_label}" "${received_entry_array_text}"
    fi
  fi
}

PrintEntryReceivedFromServer() {
  PrintEntryFieldIfNotNull "Name:" ".name" "${_Bw_Entry_Type_All}"

  PrintEntryFieldIfNotNull "User:" ".login.username" "${_Bw_Entry_Type_Login}"
  PrintEntryFieldIfNotNull "Pswd:" ".login.password" "${_Bw_Entry_Type_Login}"
  PrintEntryFieldIfNotNull "Urls:" ".login.uris"     "${_Bw_Entry_Type_Login}" ".uri" 

  PrintEntryFieldIfNotNull "Hldr:" ".card.cardholderName" "${_Bw_Entry_Type_Card}"
  PrintEntryFieldIfNotNull "Brnd:" ".card.brand"          "${_Bw_Entry_Type_Card}"
  PrintEntryFieldIfNotNull "Num: " ".card.number"         "${_Bw_Entry_Type_Card}"
  PrintEntryFieldIfNotNull "Code:" ".card.code"           "${_Bw_Entry_Type_Card}"
  PrintEntryFieldIfNotNull "ExpM:" ".card.expMonth"       "${_Bw_Entry_Type_Card}"
  PrintEntryFieldIfNotNull "ExpY:" ".card.expYear"        "${_Bw_Entry_Type_Card}"

  PrintEntryFieldIfNotNull "Ttl: " ".identity.title"          "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Fnm: " ".identity.firstName"      "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Mnm: " ".identity.middleName"     "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Lnm: " ".identity.lastName"       "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Adr1:" ".identity.address1"       "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Adr2:" ".identity.address2"       "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Adr3:" ".identity.address3"       "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "City:" ".identity.city"           "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Stat:" ".identity.state"          "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Zip: " ".identity.postalCode"     "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Ctry:" ".identity.country"        "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Comp:" ".identity.company"        "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Eml: " ".identity.email"          "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Phn: " ".identity.phone"          "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Ssn: " ".identity.ssn"            "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Unm: " ".identity.username"       "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Ppt: " ".identity.passportNumber" "${_Bw_Entry_Type_Identity}"
  PrintEntryFieldIfNotNull "Lic: " ".identity.licenseNumber"  "${_Bw_Entry_Type_Identity}"

  PrintEntryFieldIfNotNull "Note:" ".notes" "${_Bw_Entry_Type_All}"
}

DoPrintHelpMenu() {
  PrintUsage
}

DoPrintEntryAndCopyPswd() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
  GetEntryFromBitwardenVaultServer "$@"
  PrintEntryReceivedFromServer "$@"
}

DoPrintEntry() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
  GetEntryFromBitwardenVaultServer "$@"
  PrintEntryReceivedFromServer "$@"
}

DoCopyEntryPswd() {
  LoginToBitwardenAndUnlockVaultAsReq "$@"
}

DoLockVaultAndLogout() {
  # Note: logging out automatically locks the vault and invalidates session key
  printf "Locking Bitwarden vault and logging out...\n"
  ${_Bw_Cli_Cmd} logout 1> /dev/null 2>&1

  exit_code="${?}"
  if [ "${exit_code}" = 1 ]; then
    printf "Vault already locked, and already logged out.\n"
  elif [ "${exit_code}" != 0 ]; then
    QuitErrMsg "Bitwarden CLI error attempting to logout" 5
  else
    printf "Successfully locked vault and logged out.\n"
  fi
}

DoCheckLoginAndUnlock() {
  CreateSessionKeySaveFileAsReq "$@"

  eval "${_Bw_Login_Check_Cmd}"
  exit_code="${?}"
  if [ "${exit_code}" = 0 ]; then
    login_status="logged in"
  elif [ "${exit_code}" = 1 ]; then
    login_status="logged out"
  else
    QuitErrMsg "Bitwarden CLI error attempting to check vault login" 5
  fi

  session_key="$(cat "${Session_Key_Save_File_Path}")"
  run_unlock_check_cmd="${_Bw_Unlock_Check_Cmd_Prefix} \"${session_key}\" ${_Bw_Unlock_Check_Cmd_Suffix}"
  eval "${run_unlock_check_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" = 0 ]; then
    vault_status="unlocked"
  elif [ "${exit_code}" = 1 ]; then
    vault_status="locked"
  else
    QuitErrMsg "Bitwarden CLI error attempting to check vault unlock" 5
  fi

  printf "Vault status: %s, %s.\n" "${login_status}" "${vault_status}"
}

# MAIN SCRIPT:

Main() {
  GetCmdOpts "$@"
  GetCmdArgs "$@"
  if [ "${Print_Help_Menu}" = 'true' ]; then
    DoPrintHelpMenu "$@"
  elif [ "${Print_Entry_And_Copy_Pswd}" = 'true' ]; then
    DoPrintEntryAndCopyPswd "$@"
  elif [ "${Print_Entry}" = 'true' ]; then
    DoPrintEntry "$@"
  elif [ "${Copy_Entry_Pswd}" = 'true' ]; then
    DoCopyEntryPswd "$@"
  elif [ "${Lock_Vault_And_Logout}" = 'true' ]; then
    DoLockVaultAndLogout "$@"
  elif [ "${Check_Login_And_Unlock}" = 'true' ]; then
    DoCheckLoginAndUnlock "$@"
  else
    DoPrintEntryAndCopyPswd "$@"
  fi
  exit 0
}

Main "$@"

